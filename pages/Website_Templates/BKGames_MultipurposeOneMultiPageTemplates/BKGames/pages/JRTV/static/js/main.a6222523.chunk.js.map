{"version":3,"sources":["logo.svg","components/Giphy/ContentManager.jsx","components/Giphy/Prompt.jsx","components/Giphy/SharePrompt.jsx","components/Giphy/Giphy.jsx","App.js","reportWebVitals.js","index.js"],"names":["ContentManager","isInitialized","response","this","redditGifApi","Date","getTime","jsonp","name","err","data","Prompt","props","reposition","bind","repositionOnMount","window","setTimeout","prevProps","prevState","visible","eventListener","add","remove","prompt","ReactDOM","findDOMNode","refs","updatePosition","height","innerHeight","document","body","clientHeight","width","innerWidth","clientWidth","top","offsetHeight","left","offsetWidth","Math","max","className","onClick","onOverlayClick","ref","onModalClick","style","position","right","bottom","children","React","Component","displayName","defaultProps","log","debug","TVPrompt","state","promptVisible","repositionShowPrompt","tvShowPrompt","documentElement","scrollTop","scrollLeft","closeModal","type","overlayClicked","Giphy","count","currentGifUrl","currentTitle","currentSource","localStorgeArray","hourFormat","channel","giphyContent","origins","finalArray","gifPattern","imgurDetection","length","i","test","url","giphyTitle","title","giphyUrl","push","source","shouldUpdate","localGiphyArray","localStorage","getItem","currentDate","getMonth","getDate","getFullYear","storageDate","setItem","init","config","currentGifList","currentGifArray","formatGifs","JSON","stringify","shuffle","setState","o","j","x","floor","random","currentArray","parse","rederingGipUrl","rederingGipName","rederingGifSource","gifCount","parseInt","gifImgWindow","id","src","givId","match","poster","preload","autoPlay","muted","loop","webkit-playsinline","dangerouslySetInnerHTML","__html","handleChannelChange","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a6222523.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport debug from 'debug';\nimport jsonp from 'jsonp';\nimport Giphy from './Giphy';\n\nexport default class ContentManager {\n    isInitialized = false;\n\n    static init(response) {\n        if (this.isInitialized) {\n            return;\n        }\n        this.isInitialized = true;\n        let redditGifApi = `http://akz.imgfarm.com/pub/feeds/giphy/redditgif.jsonp?v=${new Date().getTime()}`;\n        jsonp(redditGifApi, {\n            name: 'jsonpCallback'\n        }, (err, data) => {\n            if (err) {\n                throw(err);\n            }\n            response(data);\n        });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport eventListener from 'eventlistener';\n\n\nexport default class Prompt extends React.Component {\n\n    static displayName = 'Prompt';\n\n    // static propTypes = {\n    //     type: React.PropTypes.string,\n    //     visible: React.PropTypes.bool,\n    //     position: React.PropTypes.shape({\n    //         top: React.PropTypes.number,\n    //         right: React.PropTypes.number,\n    //         left: React.PropTypes.number,\n    //         bottom: React.PropTypes.number,\n    //     }),\n    //     children: React.PropTypes.node,\n    //     onOverlayClick: React.PropTypes.func,\n    //     onModalClick: React.PropTypes.func,\n    //     updatePosition: React.PropTypes.func,\n    //     repositionOnMount: React.PropTypes.bool,\n    // };\n\n    static defaultProps = {\n        visible: false,\n        repositionOnMount: false,\n        position: {\n            top: -99999,\n            left: -99999,\n        },\n    };\n\n    constructor(props) {\n        super(props);\n        this.reposition = this.reposition.bind(this);\n    }\n\n    componentDidMount() {\n        if (this.props.repositionOnMount) {\n            window.setTimeout(this.reposition, 0);\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.visible !== prevProps.visible) {\n            if (this.props.visible === true) {\n                eventListener.add(window, 'resize', this.reposition, false);\n                window.setTimeout(this.reposition, 0);\n            }\n            else if (this.props.visible === false) {\n                eventListener.remove(window, 'resize', this.reposition);\n            }\n        }\n    }\n\n    reposition() {\n        const prompt = ReactDOM.findDOMNode(this.refs.prompt);\n        if (!prompt || typeof this.props.updatePosition !== 'function') {\n            return;\n        }\n\n        const height = window.innerHeight || document.body.clientHeight;\n        const width = window.innerWidth || document.body.clientWidth;\n        const top = (height - prompt.offsetHeight) / 2;\n        const left = (width - prompt.offsetWidth) / 2;\n        this.props.updatePosition({\n            top: Math.max(0, top),\n            left: Math.max(0, left),\n        });\n    }\n\n    render() {\n        if (!this.props.visible) {\n            return null;\n        }\n\n        return (\n            <div className=\"prompt-manager\">\n                <div className=\"prompt-overlay\" onClick={this.props.onOverlayClick}></div>\n                <div className=\"prompt-modal\"\n                    ref=\"prompt\"\n                    onClick={this.props.onModalClick}\n                    style={{\n                        top: this.props.position.top,\n                        right: this.props.position.right,\n                        left: this.props.position.left,\n                        bottom: this.props.position.bottom,\n                    }}\n                >\n                    {this.props.children}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport debug from 'debug';\nimport jsonp from 'jsonp';\nimport Prompt from './Prompt';\n\nconst log = debug('wtt.SharePrompt');\n\nconst title = 'GitHub';\nconst shareUrl = 'https://i.redd.it/ylqdihuc17ay.gif';\n\nexport default class TVPrompt extends React.Component {\n    constructor(props) {\n        log('constructor');\n        super(props);\n        this.state = {\n            promptVisible: false\n        };\n        this.repositionShowPrompt = this.repositionShowPrompt.bind(this);\n    }\n\n    repositionShowPrompt() {\n        const prompt = ReactDOM.findDOMNode(this.refs.tvShowPrompt);\n        if (!prompt) return;\n\n        const height = window.innerHeight || document.body.clientHeight;\n        const width = window.innerWidth || document.body.clientWidth;\n        const top = (height + document.documentElement.scrollTop - prompt.offsetHeight) / 2;\n        const left = (width + document.documentElement.scrollLeft - prompt.offsetWidth) / 2;\n        // TVActions.updatePosition({\n        //     top: Math.max(0, top),\n        //     left: Math.max(0, left),\n        // });\n    }\n\n    closeModal(){\n        //TVActions.hide();\n    }\n\n    modalContent(){\n        if (!this.props.visible) {\n            return null;\n        }\n        return(\n        \t<div>\n\t            <div className=\"closeBtn trigerClose track\" onClick={() => this.closeModal()}></div>\n\n        \t</div>\n    \t);\n\t}\n\n    render() {\n        log('promptrender', this.props, this.state);\n\n        return(\n            <Prompt\n                type=\"contentModal\"\n                visible={this.props.visible/* set to true to work on model*/}\n                // visible={true}\n                position={this.props.position}\n                onOverlayClick={this.overlayClicked}\n                >\n\n                {/*<div className=\"model\" ref=\"sharePrompt\" onLoad={this.repositionShowPrompt}>\n                    this.modalContent()\n                    <TwitterShareButton\n                        url={shareUrl}\n                        title={title}\n                        className=\"Demo__some-network__share-button\">\n                        <TwitterIcon\n                          size={32}\n                          round />\n                    </TwitterShareButton>\n                    <FacebookShareButton\n                        url={shareUrl}\n                        title={title}\n                        className=\"Demo__some-network__share-button\">\n                        <FacebookIcon\n                          size={32}\n                          round />\n                    </FacebookShareButton>\n                </div>*/}\n            </Prompt>\n        );\n    }\n}","import React from 'react';\nimport debug from 'debug';\n\nimport shallowequal from 'shallowequal';\nimport ContentManager from './ContentManager';\nimport Prompt from './Prompt';\nimport SharePrompt  from \"./SharePrompt\";\n\nimport './style.scss';\n\nconst log = debug('wtt.Giphy');\n\nexport default class Giphy extends React.Component {\n    static displayName = 'Giphy';\n\n    static propTypes = {\n        \n    };\n\n    constructor(props) {\n        log('constructor');\n        super(props);\n        this.count = 0;\n        this.state = {\n            currentGifUrl: `https://s3.amazonaws.com/tholman.com/img/static.gif`,\n            currentTitle: `Now Loading....`,\n            currentSource: `static`,\n            localStorgeArray: ``,\n            hourFormat: `12hour`,\n            channel: 0,\n        };\n    }\n\n    static defaultProps = {\n        config: {\n            currentGifList: [],\n        },\n    };\n\n    formatGifs(giphyContent, origins){\n        if (origins === 'reddit') {\n            let finalArray = [];\n\n            const gifPattern = /(\\.gif$|\\.gifv$)/;\n            const imgurDetection = /(i\\.imgur)/;\n            if (giphyContent.length > 0) {\n                for (let i = 0; i < giphyContent.length; i++) {\n                    // debugger;\n                    let currentSource = 'reddit';\n                    if (gifPattern.test(giphyContent[i].data.url)) {\n                        if (imgurDetection.test(giphyContent[i].data.url)) {\n                            currentSource = 'imgur';\n                        }\n                        let giphyTitle = giphyContent[i].data.title;\n                        let giphyUrl = giphyContent[i].data.url;\n                        // TO TRY AND INNCORP IFRAME\n                        // if (giphyUrl[giphyUrl.length - 1] === 'v') {\n                        //     giphyUrl = giphyUrl.slice(0, -1);\n                        // }\n                        finalArray.push({name: giphyTitle, url: giphyUrl, source: currentSource});\n                    }\n                }\n                return finalArray;\n            }\n        } else if (origins === 'giphy') {\n            \n        } else {\n            return [];\n        }\n    }\n\n    componentWillMount(){\n        let shouldUpdate = false;\n        let localGiphyArray = localStorage.getItem(\"mywayGiphyArray\");\n        let currentDate = new Date();\n        currentDate = `${currentDate.getMonth()+1}/${currentDate.getDate()}/${currentDate.getFullYear()}`;\n        if (localGiphyArray === null || localGiphyArray === 'undefined') {\n            shouldUpdate = true;\n        } else {\n            let storageDate = localStorage.getItem(\"mywayGiphyDate\");\n            if (storageDate === null || storageDate === 'undefined') {\n                localStorage.setItem(\"mywayGiphyDate\", currentDate);\n            } else {\n                if (storageDate !== currentDate) {\n                    shouldUpdate = true;\n                }\n            }\n        }\n\n        if (shouldUpdate) {\n            log('componentWillMount', 'Getting Data');\n\n            window.setTimeout(()=>{\n                ContentManager.init((data)=>{\n                    this.props.config.currentGifList = data.data.children;\n                    this.count = 0;\n                    let currentGifArray = this.formatGifs(this.props.config.currentGifList, 'reddit');\n\n                    localStorage.setItem(\"mywayGiphyArray\", JSON.stringify(this.shuffle(currentGifArray)));\n                    localStorage.setItem(\"mywayGiphyCount\", this.count);\n                    localStorage.setItem(\"mywayGiphyDate\", currentDate);\n                    this.setState({\n                        localStorgeArray: `have data on ${currentDate}`\n                    });\n                });\n            }, 0);\n        }\n    }\n\n    shuffle(o) {\n        for (var j, x, i = o.length; i; j = Math.floor(Math.random() * i),\n        x = o[--i],\n        o[i] = o[j],\n        o[j] = x)\n            ;\n        return o\n    }\n\n    handleShare(){\n        // debugger;\n        //this.props.visible = true;\n    }\n\n    handleChannelChange(){\n       this.setState({\n            channel: this.count + 1,\n       });\n    }\n\n\n    componentDidMount() {\n        log('componentDidMount');\n\n        // let currentArray = this.formatGifs(this.props.config.currentGifList, 'reddit');\n        // localStorage.setItem(\"mywayGiphyArray\", currentArray);\n    }\n\n\n    render() {\n        let currentArray = JSON.parse(localStorage.getItem(\"mywayGiphyArray\")); // this is being saved as a string!!!!!\n        let rederingGipUrl = this.state.currentGifUrl;\n        let rederingGipName = this.state.currentTitle;\n        let rederingGifSource = this.state.currentSource;\n        if (localStorage.getItem(\"mywayGiphyCount\") === null) {\n            localStorage.setItem(\"mywayGiphyCount\", this.count);\n        }\n        let gifCount = parseInt(localStorage.getItem(\"mywayGiphyCount\"));\n        if (currentArray) {\n            if (currentArray !== 'undefined' && currentArray.length > 0) {\n                if (gifCount >= 0 && currentArray.length >= gifCount) {\n                    if (currentArray.length == gifCount) {\n                        gifCount = 0;\n                    }\n                    rederingGipUrl = currentArray[gifCount].url;\n                    rederingGipName = currentArray[gifCount].name;\n                    rederingGifSource = currentArray[gifCount].source;\n                } else {\n                    gifCount = 0;\n                    rederingGipUrl = currentArray[gifCount].url;\n                    rederingGipName = currentArray[gifCount].name;\n                    rederingGifSource = currentArray[gifCount].source;\n                }\n            } else {\n                let currentGifArray = this.formatGifs(this.props.config.currentGifList, 'reddit');\n                localStorage.setItem(\"mywayGiphyArray\", JSON.stringify(currentGifArray));\n\n            }\n            gifCount += 1;\n            localStorage.setItem(\"mywayGiphyCount\", gifCount);\n        }\n        let gifImgWindow = <img id=\"gif-pic\" src='https://s3.amazonaws.com/tholman.com/img/static.gif' />;\n        if (rederingGipUrl[rederingGipUrl.length - 1] === 'v' || rederingGifSource === 'imgur') {\n            let givId = rederingGipUrl.match(/imgur.com\\/(...*)\\.(gifv|gif)/);\n            // Todo vidStyles will change\n            gifImgWindow = <video poster={`//i.imgur.com/${givId[1]}.jpg`} preload=\"auto\" autoPlay=\"autoplay\" muted=\"muted\" loop=\"loop\" webkit-playsinline=\"\" id=\"gif-pic\" className='video-gifv'><source src={`//i.imgur.com/${givId[1]}.mp4`} type=\"video/mp4\" /></video>\n            log('Render', 'GIFV!!!!!!');\n        } else {\n            gifImgWindow = <img id=\"gif-pic\" src={rederingGipUrl} />;\n        }\n        //rederingGipUrl[rederingGipUrl.length - 1] === 'v' ? <iframe src='http://i.imgur.com/NMlK3Bc.gifv' /> : <img id=\"gif-pic\" src={rederingGipUrl} />\n        // <video poster=\"//i.imgur.com/pmtlqx7h.jpg\" preload=\"auto\" autoplay=\"autoplay\" muted=\"muted\" loop=\"loop\" webkit-playsinline=\"\" style=\"width: 527px; height: 292px;\"> <source src=\"//i.imgur.com/pmtlqx7.mp4\" type=\"video/mp4\"></video>\n\n        return(\n            <div>\n            <SharePrompt props={this.props} />\n                <div className='tv-container'>\n                <div className='landscape'></div>\n                    {/*<div className='gif-container'>\n\n\n\n                    </div>\n                    <div className='share-click' onClick={() => this.handleShare()}>\n                        <img className='tv-image' src='https://media.giphy.com/media/eslTmXcTNiiVDSyh0W/giphy.gif'/>\n                    </div>\n                    <img className='tv-image responsive-img' src='https://media.giphy.com/media/eslTmXcTNiiVDSyh0W/giphy.gif'/> */}\n                    <div className='tv-screen'>\n                        \n                        <div className='mediaWrapper'>\n\n                            {gifImgWindow}\n                        </div>\n                        <div className='gif-name'>\n                            <div className='tite-container'>\n                                <h1 dangerouslySetInnerHTML={{__html: rederingGipName}} />\n                            </div>\n                        </div>\n                        <div className='tv-buttonWrapper'>\n                            <button onClick={() => this.handleChannelChange()}>Up</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        ); \n    }\n\n}","import logo from './logo.svg';\nimport Giphy from './components/Giphy/Giphy';\n// import './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Giphy />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}